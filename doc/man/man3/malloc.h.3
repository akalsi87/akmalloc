.TH "malloc.h" 3 "Sun Jul 17 2016" "akmalloc" \" -*- nroff -*-
.ad l
.nh
.SH NAME
malloc.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stddef\&.h>\fP
.br

.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef int(* \fBak_seg_cbk\fP )(const void *p, size_t sz)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void * \fBak_malloc\fP (size_t n)"
.br
.ti -1c
.RI "void * \fBak_calloc\fP (size_t n, size_t s)"
.br
.ti -1c
.RI "void \fBak_free\fP (void *p)"
.br
.ti -1c
.RI "size_t \fBak_malloc_usable_size\fP (const void *p)"
.br
.ti -1c
.RI "void * \fBak_realloc\fP (void *p, size_t newsz)"
.br
.ti -1c
.RI "void * \fBak_memalign\fP (size_t aln, size_t sz)"
.br
.ti -1c
.RI "void * \fBak_aligned_alloc\fP (size_t aln, size_t sz)"
.br
.ti -1c
.RI "int \fBak_posix_memalign\fP (void **pptr, size_t aln, size_t sz)"
.br
.ti -1c
.RI "void \fBak_malloc_for_each_segment\fP (\fBak_seg_cbk\fP cbk)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBDate:\fP
.RS 4
Mar 01, 2016 
.RE
.PP

.PP
Definition in file \fBmalloc\&.h\fP\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef int(* ak_seg_cbk)(const void *p, size_t sz)"
Gets a pointer to a memory segment and its size\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp;\fP Pointer to segment memory\&. 
.br
\fIsz;\fP Number of bytes in the segment\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fC0\fP to stop iteration, non-zero to continue\&. 
.RE
.PP

.PP
Definition at line 62 of file malloc\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void* ak_aligned_alloc (size_taln, size_tsz)"
Attempt to allocate memory containing at least \fCn\fP bytes at an address which is a multiple of \fCaln\fP\&. \fCaln\fP must be a power of two\&. \fCsz\fP must be a multiple of \fCaln\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaln;\fP The alignment 
.br
\fIsz;\fP The size for the allocation
.RE
.PP
\fBReturns:\fP
.RS 4
\fC0\fP on failure, else pointer to at least \fCn\fP bytes of memory at an aligned address\&. 
.RE
.PP

.PP
Definition at line 3024 of file malloc\&.c\&.
.SS "void* ak_calloc (size_tn, size_ts)"
Attempt to allocate zeroed memory, containing at least \fCn\fP x \fCs\fP bytes\&. 
.PP
\fBParameters:\fP
.RS 4
\fIn;\fP Number of objects to zero\&. 
.br
\fIs;\fP The size for each object\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fC0\fP on failure, else pointer to at least \fCs\fP bytes of memory\&. 
.RE
.PP

.PP
Definition at line 3011 of file malloc\&.c\&.
.SS "void ak_free (void *p)"
Return memory to the allocator\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp;\fP Pointer to the memory to return\&. 
.RE
.PP

.PP
Definition at line 3018 of file malloc\&.c\&.
.SS "void* ak_malloc (size_tn)"
Attempt to allocate memory containing at least \fCn\fP bytes\&. 
.PP
\fBParameters:\fP
.RS 4
\fIn;\fP The size for the allocation
.RE
.PP
\fBReturns:\fP
.RS 4
\fC0\fP on failure, else pointer to at least \fCn\fP bytes of memory\&. 
.RE
.PP

.PP
Definition at line 3005 of file malloc\&.c\&.
.SS "void ak_malloc_for_each_segment (\fBak_seg_cbk\fPcbk)"
Iterate over all memory segments allocated\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbk;\fP Callback that is given the address of a segment and its size\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBak_seg_cbk\fP\&. 
.RE
.PP

.PP
Definition at line 3059 of file malloc\&.c\&.
.SS "size_t ak_malloc_usable_size (const void *p)"
Return the usable size of the memory region pointed to by \fCp\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp;\fP Pointer to the memory to determize size of\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The number of bytes that can be written to in the region\&. 
.RE
.PP

.PP
Definition at line 3042 of file malloc\&.c\&.
.SS "void* ak_memalign (size_taln, size_tsz)"
Attempt to allocate memory containing at least \fCn\fP bytes at an address which is a multiple of \fCaln\fP\&. \fCaln\fP must be a power of two\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaln;\fP The alignment 
.br
\fIsz;\fP The size for the allocation
.RE
.PP
\fBReturns:\fP
.RS 4
\fC0\fP on failure, else pointer to at least \fCn\fP bytes of memory at an aligned address\&. 
.RE
.PP

.PP
Definition at line 3036 of file malloc\&.c\&.
.SS "int ak_posix_memalign (void **pptr, size_taln, size_tsz)"
Attempt to allocate memory containing at least \fCn\fP bytes at an address which is a multiple of \fCaln\fP and assign the address to \fC*pptr\fP\&. \fCaln\fP must be a power of two and a multiple of \fCsizeof(void*)\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpptr;\fP The address where the memory address should be writted\&. 
.br
\fIaln;\fP The alignment 
.br
\fIsz;\fP The size for the allocation
.RE
.PP
\fBReturns:\fP
.RS 4
\fC0\fP on success, 12 if no more memory is available, and 22 if \fCaln\fP was not a power of two and a multiple of \fCsizeof(void*)\fP 
.RE
.PP

.PP
Definition at line 3030 of file malloc\&.c\&.
.SS "void* ak_realloc (void *p, size_tnewsz)"
Attempt to grow memory at the region pointed to by \fCp\fP to a size \fCnewsz\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp;\fP Memory to grow 
.br
\fInewsz;\fP New size to grow to
.RE
.PP
This function will copy the old bytes to a new memory location if the old memory cannot be grown in place, and will free the old memory\&. If no more memory is available it will not destroy the old memory\&.
.PP
\fBReturns:\fP
.RS 4
\fCNULL\fP if no memory is available, or a pointer to memory with at least \fCnewsz\fP bytes\&. 
.RE
.PP

.PP
Definition at line 3047 of file malloc\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for akmalloc from the source code\&.
